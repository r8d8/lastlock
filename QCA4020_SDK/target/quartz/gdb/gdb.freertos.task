#===============================================================================
# Copyright (c) 2017-2018 Qualcomm Technologies, Inc.
# All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
# $QTI_LICENSE_QDN_SH$

# gdb macros for task management with FreeRTOS
#
# bpot [tcb_addr]: brief print one task (one line); default is brief display of CURRENT task
# vpot [tcb_addr]: verbose print one task; default is verbose display of CURRENT task
# bpat: brief print ALL tasks (one line per task)
# vpat: verbose print ALL tasks
# switchtask <tcb_addr>: switch current register context to a specified task
# switchback: return to original task context after a switchtask
# bttask <tcb_addr>: backtrace for the specified task
# bt_busfault: prints backtrace when there was a bus fault (assuming the coredump contains valid values)
#
# Typical usage:
# Stop the debugger and use bpat to see a list of all tasks.
# Then use bttask to see what a particular task is doing.
#


#Prints backtrace when there was a bus fault (assuming the coredump contains valid values)
define bt_busfault
    if ( coredump && coredump->arch.regs.name.exception_pc ) 
        set $temp_r0 = $r0
        set $temp_r1 = $r1
        set $temp_r2 = $r2
        set $temp_r3 = $r3
        set $temp_r12 = $r12
        set $temp_lr = $lr
        set $temp_pc = $pc
        set $temp_sp = $sp

        set $r0 = coredump->arch.regs.name.exception_r0
        set $r1 = coredump->arch.regs.name.exception_r1
        set $r2 = coredump->arch.regs.name.exception_r2
        set $r3 = coredump->arch.regs.name.exception_r3
        set $r12 = coredump->arch.regs.name.exception_r12
        set $lr = coredump->arch.regs.name.exception_lr
        set $pc = coredump->arch.regs.name.exception_pc
        set $sp = $PSP

        bt

        set $r0 = $temp_r0
        set $r1 = $temp_r1
        set $r2 = $temp_r2
        set $r3 = $temp_r3
        set $r12 = $temp_r12
        set $lr = $temp_lr
        set $pc = $temp_pc
        set $sp = $temp_sp
    else
        printf "WARNING: coredump is empty, cannot display backtrace\n"
    end
end


# Print information about a specified task
define print_one_task
    set $verbose_flag=$arg0
    set $tmp_tcb = (TCB_t * volatile) $arg1

    set $top_of_stack = (uint8_t *) ($tmp_tcb->pxStack)    
    set $byte_index = 0
    set $is_stack_corrupted = 0
    while ( ($byte_index < 32) && !$is_stack_corrupted )
        if ( $top_of_stack[$byte_index] != 0xa5 )
            set $is_stack_corrupted = 1
        end
        set $byte_index = $byte_index + 1
    end

    if $verbose_flag
        p * $tmp_tcb
        if $is_stack_corrupted
            printf "WARNING: STACK IS CORRUPTED\n"
        end
    else
        if $is_stack_corrupted
            printf "task = 0x%x    name = %-10s   prio = %d   WARNING: STACK IS CORRUPTED\n", $tmp_tcb, $tmp_tcb->pcTaskName, $tmp_tcb->uxPriority
        else
            printf "task = 0x%x    name = %-10s   prio = %d\n", $tmp_tcb, $tmp_tcb->pcTaskName, $tmp_tcb->uxPriority
        end
    end
end


# Alias for "brief print_one_task"
# Usage:
#   bpot tcb_address
define bpot
   if $argc == 0
      print_one_task 0 pxCurrentTCB
   else
      print_one_task 0 $arg0
   end
end

# Alias for "verbose print_one_task"
# Usage:
#   vpot tcb_address
define vpot
   if $argc == 0
      print_one_task 1 pxCurrentTCB
   else
      print_one_task 1 $arg0
   end
end

# Print a list of all tasks in a task list
define print_task_list
    set $verbose_flag=$arg0
    set $task_list = $arg1
    set $number_of_tasks = $task_list->uxNumberOfItems
    set $task_index = 0
    if $number_of_tasks > 0
        set $current_element = $task_list->xListEnd.pxNext
        while ($task_index < $number_of_tasks) && ( $current_element )
            set $task_tcb = (TCB_t * volatile) $current_element->pvOwner
            print_one_task $verbose_flag $task_tcb
            set $next_element = $current_element->pxNext
            set $current_element = $next_element
            set $task_index = $task_index + 1
        end
    end
end

# Print the list of all READY tasks
define print_ready_tasks
    set $verbose_flag=$arg0
    set $max_task_priorities = 32
    set $task_priority = 0
    set $total_ready_tasks = 0
    while $task_priority < $max_task_priorities
        set $total_ready_tasks = $total_ready_tasks + pxReadyTasksLists[$task_priority].uxNumberOfItems
        set $task_priority = $task_priority + 1
    end
    printf "Ready Tasks (%d):\n", $total_ready_tasks
    set $task_priority = 0
    while $task_priority < $max_task_priorities
        set $number_of_tasks = pxReadyTasksLists[$task_priority].uxNumberOfItems
        set $task_index = 0
        if $number_of_tasks > 0
            printf "Priority %d Ready Tasks (%d):\n", $task_priority, $number_of_tasks
            print_task_list $verbose_flag &pxReadyTasksLists[$task_priority]
        end
        set $task_priority = $task_priority + 1
    end
end

# Print the list of all DELAYED tasks
define print_delayed_task
    set $verbose_flag=$arg0
    printf "Delayed Tasks (%d):\n", pxDelayedTaskList->uxNumberOfItems
    print_task_list $verbose_flag &pxDelayedTaskList
end

# Print the list of all OVERFLOWED DELAYED tasks
define print_overflow_delayed_tasks
    set $verbose_flag=$arg0
    printf "Overflow Delayed Tasks (%d):\n", pxOverflowDelayedTaskList->uxNumberOfItems
    print_task_list $verbose_flag &pxOverflowDelayedTaskList
end

# Print the list of all tasks waiting for TERMINATION
define print_waiting_termination_tasks
    set $verbose_flag=$arg0
    printf "Waiting Termination Tasks (%d):\n", xTasksWaitingTermination->uxNumberOfItems
    print_task_list $verbose_flag &xTasksWaitingTermination
end

# Print the list of all SUSPENDED tasks
define print_suspended_tasks
    set $verbose_flag=$arg0
    printf "Suspended Tasks (%d):\n", xSuspendedTaskList->uxNumberOfItems
    print_task_list $verbose_flag &xSuspendedTaskList
end

# Print information about the CURRENTLY-EXECUTING task.
# (Use gdb's "bt" to see the stack backtrace for the currently-executing task.)
define print_current_task
    set $verbose_flag=$arg0
    printf "Current Task:\n"
    print_one_task $verbose_flag pxCurrentTCB
end

# Print information about all tasks, regardless of state

define print_all_tasks
    set $verbose_flag=$arg0
    print_current_task $verbose_flag
    printf "\n\n"
    print_ready_tasks $verbose_flag
    printf "\n\n"
    print_delayed_task $verbose_flag
    printf "\n\n"
    print_overflow_delayed_tasks $verbose_flag
    printf "\n\n"
    print_waiting_termination_tasks $verbose_flag
    printf "\n\n"
    print_suspended_tasks $verbose_flag
    printf "\n\n"
end

# Brief print_all_tasks
define bpat
    print_all_tasks 0
end

# Verbose print_all_tasks
define vpat
    print_all_tasks 1
end

define save_regs
   if $regs_are_saved == 0
      flushregs
      set $regs_are_saved=1
      set $save_sp=$sp
      set $save_pc=$pc
      set $save_lr=$lr
      set $save_r0=$r0
      set $save_r1=$r1
      set $save_r2=$r2
      set $save_r3=$r3
      set $save_r4=$r4
      set $save_r5=$r5
      set $save_r6=$r6
      set $save_r7=$r7
      set $save_r8=$r8
      set $save_r9=$r9
      set $save_r10=$r10
      set $save_r11=$r11
      set $save_r12=$r12
   end
end

define restore_regs
   if $regs_are_saved == 1
      flushregs
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x44)=$sp
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x3c)=$pc
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x38)=$lr
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x24)=$r0
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x28)=$r1
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x2c)=$r2
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x30)=$r3
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x00)=$r4
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x04)=$r5
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x08)=$r6
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x0c)=$r7
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x10)=$r8
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x14)=$r9
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x18)=$r10
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x1c)=$r11
      set *(int *)(((char *)($reg_owner_tcb->pxTopOfStack)) + 0x34)=$r12
      set $sp=$save_sp
      set $pc=$save_pc
      set $lr=$save_lr
      set $r0=$save_r0
      set $r1=$save_r1
      set $r2=$save_r2
      set $r3=$save_r3
      set $r4=$save_r4
      set $r5=$save_r5
      set $r6=$save_r6
      set $r7=$save_r7
      set $r8=$save_r8
      set $r9=$save_r9
      set $r10=$save_r10
      set $r11=$save_r11
      set $r12=$save_r12
      set $regs_are_saved=0
   end
end

# Switch active gdb register context to the registers of a specified task.
# Save current register context before doing this so that register values
# may be restored later by "switchback". This enables a developer to inspect
# the stack easily by using gdb's "frame" command, and to change values of
# registers in the context of a non-running task.
#
# Note1: Only gdb's notion of register values are changed; in-memory
# state such as pxCurrentTCB is not altered by this gdb macro.
#
# Note2: If you alter a register's value, the new value is pushed back
# to the task's TCB when you "switchback" (or when you resume execution).
#
define switchtask
   if $reg_owner_tcb != (TCB_t * volatile)0
      switchback
   end
   save_regs
   set $reg_owner_tcb = (TCB_t * volatile) $arg0
   set $sp=(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x44)
   set $pc=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x3c)
   set $lr=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x38)
   set $r0=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x24)
   set $r1=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x28)
   set $r2=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x2c)
   set $r3=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x30)
   set $r4=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x00)
   set $r5=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x04)
   set $r6=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x08)
   set $r7=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x0c)
   set $r8=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x10)
   set $r9=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x14)
   set $r10=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x18)
   set $r11=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x1c)
   set $r12=*(int *)((char *)($reg_owner_tcb->pxTopOfStack) + 0x34)
end

define switchback
   restore_regs
   set $reg_owner_tcb = (TCB_t * volatile) 0
end

# Works for suspended/delayed/ready(?) tasks; but not for the current task
define bttask
   set $tmp_tcb = (TCB_t * volatile) $arg0
   switchtask $tmp_tcb
   bt
   switchback
end

set $regs_are_saved=0
set $reg_owner_tcb = (TCB_t * volatile) 0

define hook-continue
   switchback
end

define hook-step
   switchback
end

define hook-stepi
   switchback
end

define hook-next
   switchback
end
